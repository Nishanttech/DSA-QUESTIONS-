1.write a program in C to find the k'th smallest element in an one dimensional array.

#include<stdio.h>
#include<conio.h>
void main()
{
int i,temp,k,j,a[6];
clrscr() ;
printf ("Enter the value of array:");
for(i=0;i<6;i++)
{
scanf("%d",&a[i]) ;
}
printf("Elements after sorting") ;
for(i=0;i<6;i++)
{
for (j=i+1;j<6;j++)
{
if(a[i]>a[j])
{
temp=a[i];
a[i]=a[j];
a[j]=temp;
}
}
}
for(i=0;i<6;i++)
{
printf("%2d",a[i]) ;
}
printf("\nEnter the k'th smallest number\n");
scanf("%d",&k) ;
printf("k'th element is %d", a[k-1]);
getch() ;
}
_____________________________________________________________________________________________________________________________________________________________
2.Write a program in C to find Ackerman function.

#include<stdio.h>
#include<conio.h>
int ack(int,int);
int main()
{
int m,n;
clrscr();
printf("Enter the value of m and n");
scanf("%d%d",&m,&n);
printf("value of ackerman functionis %d",ack(m,n));
getch();
return 0;
}
int ack(int m,int n)
{
if (m==0)
{
return (n+1);
}
else if (m>0&&n==0)
{
return ack(m-1,1);
}
else if (m>0&&n>0)
{
return ack(m-1,ack(m,n-1));
}
return -1;
}
____________________________________________________________________________________________________

3. Write a program in C to check saddle point in given matrix.
#include<stdio.h>
#include<conio.h>
void main()
{
int i,j,k,c,f;
int a[3][3];
int min,max;
f=0;
clrscr();
printf("Enter the matrix");
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
scanf("%d",&a[i][j]);
}
}
printf("Entered matrix is :\n");
for (i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
printf("%d",a[i][j]);
printf("\t");
}
printf("\n");
}
for(i=0;i<3;i++)
{
min=a[i][0];
c=0;
for(j=0;j<3;j++)
{
if (a[i][j]<min)
{
min=a[i][j];
c=j;
}
}
for (k=0;k<3;k++)
{
max=0;
if (a[k][c]>max)
{
max=a[k][c];
}
if(max==min)
{
f=1;
} }
}
if(f==0)
{
printf("saddle point not found");
}
else
{
printf("saddle point found %d",max);
}
getch();
}
_________________________________________________________________________________________________

4.Write a program in C for ternary search.
#include<stdio.h>
#include<conio.h>
int ternarysearch(int arr[],int n,int k)
{
int m1;
int m2;
int low=0;
int high=n-1;
while(low<=high)
{
m1=low+(high-low)/3;
m2=high-(high-low)/3;
if (arr[m1]==k)
{
return m1;
}
else if (arr[m2]==k)
{
return m2;
}
else if (k<arr[m1])
{
high=m1-1;
}
else if (k<arr[m2]&&k,arr[m2])
{
high=m2-1;
low=m1+1;
}
}
return -1;
}
int main()
{
int k,ans,i,n,arr[9];
n=9;
clrscr();
printf("enter the element to search");
scanf("%d",&k);
printf("enter the value of array");
for (i=0;i<9;i++)
{
scanf("%d",&arr[i]);
}
printf("Element found at index number :");
ans=ternarysearch(arr,n,k);
printf("%d",ans);
getch();
return 0;
}
_______________________________________________________________________
5.Write a program in C to find roots using Newton-Raphson method.
#include<stdio.h>
#include<conio.h>
float a;
float f(int x)
{
return(x*x*x-10) ;
}
float f1(int x)
{
return (3*(x*x)) ;
}
float ans()
{
int i;
for(i=0;i<50;i++)
{
a=a-(f(a))/(f1(a));
}
return a;
}
void input ()
{
printf ("\nEnter the value of 'a':\n") ;
scanf ("%f", &a) ;
}
int main()
{
clrscr();
input() ;
printf("\nThe root of the equation is:%f", ans());
return 0;
} 

_______________________________________________________________________
6.Write a program in C to check Band Matrix.
#include<stdio.h>
#include<conio.h>
Void main ()
{
int i, j, f;
int a[3][3];
f=0;
clrscr();
printf (“enter the element of matrix”);
for(i=1;i<=3;i++)
{
for (j=1;j<=3;j++)
{
scanf(“%d”,&a[i][j]);
}
}
for(i=1;i<=3;i++)
{
f-or (j=1;j<=3;j++)
{
if (i==j)
{
if (a[i][j]!=0)
{
f=1;
}}}
}
if((a[1][2]!=0&&a[2][3]!=0)&&(a[2][1]!=0&&a[3][2]!=0)&&(a[1][3]==0&&a[3
][1]==0)&&(f==1))
{
printf (“Band matrix”);
}
else
{ 
printf (“Not band matrix”);
}
getch();
}

_______________________________________________________________________________________

7.Write a program in C to check magic square in a Matrix.
#include<stdio.h>
#include<conio.h>
void main ()
{
int i,j,f,sumd1,sumd2,sumc,sumr;
sumd1=0;
sumd2=0;
f=0;
int a[3][3];
clrscr();
printf (“enter the element of matrix”);
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
scanf(“%d”,&a[i][j]);
}}
for(i=0;i<3;i++)
{
for(j=0<3;j++)
{
if(i==j)
{
sumd1=sumd1+a[i][j];
}
if(i+j==2)
{
sumd2=sumd2+a[i][j];
}}}
if(sumd1!=sumd2)
{
f=1;
}
else
{
For(i=0;i<3;i++)
{
sumc=0;
sumr=0;
for(j=0;j<3;j++)
{
sumc=sumc+a[j][i];
sumr=sumr+a[i][j];
}
if(sumc!=sumd1)
{
F=1;
}
else if (sumr!=sumd1)
{
f=1;
}
else
{
f=0;
}}}
if(f==1)
{
printf(“matrix is not magic square”);
}
else
{
printf (“matrix is magic square”);
}
getch();
}
_________________________________________________________
8.Write a program in C  to find duplicate elements

#include<stdio.h>
void main()
{

    int i,x,j,f,a[6];
    f=0;
    printf("enter the element of array");
    for(i=0;i<=5;i++)
    {
        scanf("%d",&a[i]);
    }
    for(i=0;i<=5;i++)
    {
        for(j=i+1;j<=5;j++)
        {
            if(a[i]==a[j])
            {
                f=1;
                x=a[i];
            }
        }
    }
    if(f==1)
    {
        printf("Dublicate element found %d",x);
    }
    else
    {
        printf("Not found");
    }
}



***********************************************************************





